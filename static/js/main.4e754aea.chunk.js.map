{"version":3,"sources":["components/TestRunner/Header/JumpMenu.js","components/TestRunner/Header/Breadcrumbs.js","components/TestRunner/Header/ToolMenu/ThemeSwitcher.js","components/TestRunner/Header/ToolMenu/ToolMenu.js","components/TestRunner/Header/Header.js","components/TestRunner/Item/Choice.js","components/TestRunner/Item/BookmarkTool.js","components/TestRunner/Item/Item.js","components/TestRunner/Navigation/NavigationButton.js","components/TestRunner/Navigation/OverviewButton.js","components/TestRunner/Navigation/NavigationBubble.js","components/TestRunner/Navigation/NavSection.js","components/TestRunner/Navigation/TestNavigation.js","components/TestRunner/TestRunner.js","serviceWorker.js","index.js"],"names":["JumpMenu","className","href","tabIndex","role","Breadcrumbs","testTitle","sectionTitle","sectionNo","sectionsTotal","ThemeSwitcher","props","useState","theme","setTheme","onClick","toggleTheme","ToolMenu","isOpen","toggleOpen","aria-labelledby","id","disabled","Header","aria-label","sectionData","title","position","Choice","isEliminated","toggleEliminated","type","name","group","value","letter","checked","response","onChange","setResponse","bind","text","eliminable","e","preventDefault","defaultProps","BookmarkTool","isBookmarked","aria-checked","bookmarkItem","itemId","choices","Item","useEffect","document","itemData","Fragment","key","sectionId","itemAnimation","map","c","NavigationButton","dir","move","this","OverviewButton","isFinalItem","NavigationBubble","isActive","isViewed","isAnswered","showItem","isInformational","positionInPart","toString","padStart","NavSection","Object","entries","items","bookmarks","activeSectionId","activeItemId","viewed","answered","TestNavigation","moveForward","moveBack","sectionsMap","TestRunner","console","log","state","data","testMap","parts","sections","testContext","itemIdentifier","responses","markItemViewed","setState","assign","markItemAnswered","set","getActiveSection","currentSectionPos","nextSection","filter","k","v","prevSection","getPreviousSectionId","currentPos","getActiveItem","positionInSection","currentSection","keys","length","moveTo","nextSectionId","getNextSectionId","previousSectionId","previousSection","getPreviousSection","previousSectionEnd","pos","getItems","testData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e754aea.chunk.js","sourcesContent":["import React from 'react';\n\nfunction JumpMenu() {\n    return (\n        <nav className=\"jump-menu\">\n            <h2 className=\"qti-visually-hidden\">Skip menu</h2>\n            <a href=\"#main\" className=\"jump-link\" tabIndex=\"0\" role=\"button\">Skip to question 7</a>\n            <a href=\"#navigation\" className=\"jump-link\" tabIndex=\"0\" role=\"button\">Skip to navigation</a>\n            <a href=\"#tools\" className=\"jump-link\" tabIndex=\"0\" role=\"button\">Skip to tool box & configuration</a>\n        </nav>\n    );\n}\n\nexport default JumpMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    testTitle: PropTypes.string.isRequired,\n    sectionTitle: PropTypes.string.isRequired,\n    sectionNo: PropTypes.number.isRequired,\n    sectionsTotal: PropTypes.number.isRequired,\n};\n\nfunction Breadcrumbs({ testTitle, sectionTitle, sectionNo, sectionsTotal}) {\n    return (\n        <aside className=\"test-breadcrumb\">\n            <span>{testTitle}</span>\n            <span className=\"sep\">/</span>\n            <span>Section {sectionNo} of {sectionsTotal} : {sectionTitle}</span>\n        </aside>\n    );\n}\n\nBreadcrumbs.propTypes = propTypes;\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  toggleTheme: PropTypes.func.isRequired\n};\n\nfunction ThemeSwitcher(props) {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    props.toggleTheme();\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <button onClick={toggleTheme}>Light/dark mode</button>\n  );\n}\n\nThemeSwitcher.propTypes = propTypes;\n\nexport default ThemeSwitcher;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ThemeSwitcher from './ThemeSwitcher';\nimport { FiSettings } from \"react-icons/fi\";\n\nconst propTypes = {\n    toggleTheme: PropTypes.func\n};\n\nfunction ToolMenu(props) {\n    const [isOpen, toggleOpen] = useState(false);\n\n    const showHide = () => toggleOpen(!isOpen);\n\n    return (\n        <aside aria-labelledby=\"tools\" className=\"toolMenu\" onClick={showHide}>\n            <FiSettings></FiSettings>\n            <div className={'popup-menu ' + (isOpen ? '' : 'qti-visually-hidden')}>\n                <h2 id=\"tools\" className=\"qti-visually-hidden\">tool box & configuration</h2>\n                <h3 id=\"tool_title\" className=\"qti-visually-hidden\">My Test Tools</h3>\n                <ThemeSwitcher toggleTheme={props.toggleTheme}></ThemeSwitcher>\n                <button disabled>Calculator</button>\n                <button disabled>Highlighter</button>\n                <h3 className=\"qti-visually-hidden\">My Exhibits</h3>\n                <button disabled>Exhibit: Periodic Table of Elements</button>\n                <h3 className=\"qti-visually-hidden\">My Test Configuration</h3>\n                <button disabled>Test Configuration</button>\n            </div>\n        </aside>\n    );\n}\n\nToolMenu.propTypes = propTypes;\n\nexport default ToolMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiMenu } from \"react-icons/fi\";\nimport Breadcrumbs from './Breadcrumbs';\nimport ToolMenu from './ToolMenu/ToolMenu';\n\nconst propTypes = {\n  testTitle: PropTypes.string,\n  sectionData: PropTypes.object.isRequired,\n  toggleTheme: PropTypes.func\n};\n\nfunction Header(props) {\n  return (\n    <header className=\"top-bar\">\n        <button aria-label=\"main menu\" className=\"menu-button\">\n            <FiMenu></FiMenu>\n        </button>\n        <h1 id=\"assessment_name\">\n            <Breadcrumbs\n                testTitle={props.testTitle}\n                sectionTitle={props.sectionData.title}\n                sectionNo={props.sectionData.position + 1}\n                sectionsTotal={3}>\n            </Breadcrumbs>\n            <span className=\"timer\" id=\"demo-timer\" aria-label=\"Time remaining in this part: \">09:59</span>\n        </h1>\n        <ToolMenu toggleTheme={props.toggleTheme}></ToolMenu>\n    </header>\n  );\n}\n\nHeader.propTypes = propTypes;\n\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    text: PropTypes.string,\n    group: PropTypes.string,\n    letter: PropTypes.string,\n    eliminable: PropTypes.bool,\n    response: PropTypes.string,\n    setResponse: PropTypes.func\n};\n\nconst defaultProps = {\n    eliminable: false\n};\n\nfunction Choice(props) {\n    const [isEliminated, toggleEliminated] = useState(false);\n\n    const eliminate = (e) => {\n        e.preventDefault();\n        toggleEliminated(!isEliminated);\n    };\n\n    return (\n        <div className={'qti-choice ' + (isEliminated ? 'eliminated' : '')}>\n            <label>\n                <input\n                    type=\"radio\"\n                    name={props.group}\n                    value={`${props.group}_choice${props.letter}`}\n                    checked={props.response === props.letter}\n                    onChange={props.setResponse.bind(null, props)}\n                />\n                {props.letter}. {props.text}\n            </label>\n            {props.eliminable && <button onClick={eliminate}>{isEliminated ? 'Une' : 'E'}liminate answer {props.letter}</button>}\n        </div>\n    );\n}\n\nChoice.propTypes = propTypes;\nChoice.defaultProps = defaultProps;\n\nexport default Choice;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiBookmark } from \"react-icons/fi\";\n\nconst propTypes = {\n    itemId: PropTypes.string.isRequired,\n    isBookmarked: PropTypes.bool,\n    bookmarkItem: PropTypes.func\n};\n\nconst defaultProps = {\n    isBookmarked: false,\n};\n\nfunction BookmarkTool(props) {\n    return (\n        <div className={'bookmark-tool ' + (props.isBookmarked ? 'bookmarked' : '')}>\n            <h3 id=\"flag_title\" className=\"qti-visually-hidden\">Flag for review</h3>\n            <button\n                role=\"switch\"\n                aria-checked=\"false\"\n                className=\"button-large-circle scaling secondary\"\n                onClick={props.bookmarkItem.bind(null, props)}>\n                <FiBookmark></FiBookmark>\n                <span className=\"qti-visually-hidden\">Flag Question {props.itemId} for review</span>\n            </button>\n        </div>\n    );\n}\n\nBookmarkTool.propTypes = propTypes;\nBookmarkTool.defaultProps = defaultProps;\n\nexport default BookmarkTool;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Choice from './Choice';\nimport BookmarkTool from './BookmarkTool';\n\nconst propTypes = {\n    itemId: PropTypes.string.isRequired,\n    sectionId: PropTypes.string.isRequired,\n    itemAnimation: PropTypes.string,\n    itemData: PropTypes.object.isRequired,\n    response: PropTypes.string,\n    setResponse: PropTypes.func.isRequired,\n    isBookmarked: PropTypes.bool,\n    bookmarkItem: PropTypes.func\n};\n\nconst choices = [\n    {\n        letter: 'A',\n        text: 'functions as a form of self-expression'\n    },\n    {\n        letter: 'B',\n        text: 'is an inexpensive way to show appreciation'\n    },\n    {\n        letter: 'C',\n        text: 'requires the gift-recipient to reciprocate'\n    },\n    {\n        letter: 'D',\n        text: 'makes Christmas a success'\n    }\n];\n\nfunction Item(props) {\n    // const isAnimating = true;\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // Update the document title using the browser API\n        document.title = props.itemData.title;\n    }, [props.itemData.title]);\n\n    return (\n        <React.Fragment>\n            <article\n                aria-labelledby=\"question_title\"\n                key={`${props.sectionId}_${props.itemId}`}\n                className={'qti-itemBody anim-' + props.itemAnimation}\n            >\n                <h2 id=\"question_title\" className=\"qti-visually-hidden\">\n                    Question {props.itemId} of 14  - unanswered. In Question Group {props.sectionId} of 2.\n                </h2>\n\n                <section aria-label=\"reading passage\">\n                    <h3 id=\"passage_title\"><span className=\"not-visually-hidden\">Passage: </span>{props.itemData.title}</h3>\n                    <p>Every day, millions of shoppers hit the stores in\n                        full force—both online and on foot—searching\n                        frantically for the perfect gift. Last year, Americans\n                        spent over $30 billion at retail stores in the month of\n                        December alone. Aside from purchasing holiday\n                        gifts, most people regularly buy presents for other\n                        occasions throughout the year, including weddings,\n                        birthdays, anniversaries, graduations, and baby\n                        showers. <span className=\"qti-visually-hidden\">This frequent experience of gift-giving can\n                        engender ambivalent feelings in gift-givers. Many\n                        relish the opportunity to buy presents because\n                        gift-giving offers a powerful means to build stronger\n                        bonds with one’s closest peers. At the same time,\n                        many dread the thought of buying gifts; they worry\n                        that their purchases will disappoint rather than\n                        delight the intended recipients.\n                        Anthropologists describe gift-giving as a positive\n                        social process, serving various political, religious, and\n                        psychological functions. Economists, however, offer\n                        a less favorable view. According to Waldfogel (1993),\n                        gift-giving represents an objective waste of resources.\n                        People buy gifts that recipients would not choose to\n                        buy on their own, or at least not spend as much\n                        money to purchase (a phenomenon referred to as\n                        ‘‘the deadweight loss of Christmas”). To wit, givers\n                        are likely to spend $100 to purchase a gift that\n                        receivers would spend only $80 to buy themselves.\n                        This ‘‘deadweight loss” suggests that gift-givers are\n                        not very good at predicting what gifts others will\n                        appreciate. That in itself is not surprising to social\n                        psychologists. Research has found that people often\n                        struggle to take account of others’ perspectives—\n                        their insights are subject to egocentrism, social\n                        projection, and multiple attribution errors.</span></p>\n                </section>\n\n                <section aria-label=\"question\">\n                    <h3 className=\"prompt\">\n                        <span className=\"qti-visually-hidden\">Question: </span>\n                        The authors indicate that people value gift-giving because they feel it ...\n                    </h3>\n\n                    <div className=\"qti-choices\">\n                        {choices.map((c) => (\n                            <Choice\n                                group={`${props.sectionId}_${props.itemId}`}\n                                key={c.letter}\n                                letter={c.letter}\n                                text={c.text}\n                                eliminable={true}\n                                sectionId={props.sectionId}\n                                itemId={props.itemId}\n                                response={props.response}\n                                // funcs\n                                setResponse={props.setResponse}>\n                            </Choice>\n                        ))}\n                    </div>\n                </section>\n            </article>\n            <BookmarkTool\n                itemId={props.itemId}\n                sectionId={props.sectionId}\n                isBookmarked={props.isBookmarked}\n                // funcs\n                bookmarkItem={props.bookmarkItem}>\n            </BookmarkTool>\n        </React.Fragment>\n    );\n}\n\nItem.propTypes = propTypes;\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport { FiArrowRight } from 'react-icons/fi';\n\nconst propTypes = {\n  move: PropTypes.func.isRequired,\n  dir: PropTypes.string.isRequired\n};\n\nfunction NavigationButton(props) {\n  if (props.dir === 'prev') {\n    return (\n      <button\n        aria-label=\"go to previous question\"\n        className=\"button-large-circle navButton scaling prev secondary\"\n        value=\"prev\"\n        onClick={props.move.bind(this)}>\n        <FiArrowLeft></FiArrowLeft>\n      </button>\n    );\n  }\n  else if (props.dir === 'next') {\n    return (\n      <button\n        aria-label=\"go to next question\"\n        className=\"button-large-circle navButton scaling next primary\"\n        value=\"next\"\n        onClick={props.move.bind(this)}>\n        <FiArrowRight></FiArrowRight>\n      </button>\n    );\n  }\n  return null;\n}\n\nNavigationButton.propTypes = propTypes;\n\nexport default NavigationButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiChevronUp } from 'react-icons/fi';\n\nconst propTypes = {\n  isFinalItem: PropTypes.bool\n};\n\nconst defaultProps = {\n  isFinalItem: false,\n};\n\nfunction OverviewButton(props) {\n  return (\n    <button className=\"overview-button\" aria-label=\"Overview and Submit\" id=\"overview\">\n      <FiChevronUp></FiChevronUp>Overview{ props.isFinalItem && ' & Submit'}\n    </button>\n  );\n}\n\nOverviewButton.propTypes = propTypes;\nOverviewButton.defaultProps = defaultProps;\n\nexport default OverviewButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TiInfoLarge } from 'react-icons/ti';\nimport { FaBookmark } from 'react-icons/fa';\n\nconst propTypes = {\n    showItem: PropTypes.func.isRequired,\n    itemId: PropTypes.string.isRequired,\n    sectionId: PropTypes.string.isRequired,\n    itemData: PropTypes.object,\n    isInformational: PropTypes.bool,\n    isActive: PropTypes.bool,\n    isViewed: PropTypes.bool,\n    isAnswered: PropTypes.bool,\n    isBookmarked: PropTypes.bool\n};\n\nconst defaultProps = {\n    isInformational: false,\n};\n\n// class NavigationBubble extends React.Component {\nfunction NavigationBubble(props) {\n    return (\n        <li className={'navBubble ' + (props.isActive ? 'active ' : '') + (props.isViewed ? 'viewed ' : '') + (props.isAnswered ? 'answered ' : '')}>\n            <a\n                className=\"bubble-content\"\n                aria-label={`Question ${props.itemId} ${props.isAnswered ? '(Answered)' : ''}`}\n                onClick={props.showItem.bind(null, props)}>\n                { props.isInformational && <TiInfoLarge className=\"informational\"></TiInfoLarge> }\n                { !props.isInformational && (props.itemData.positionInPart + 1).toString().padStart(2,'0') }\n                { props.isBookmarked && <FaBookmark className=\"mini-indicator\"></FaBookmark>}\n            </a>\n        </li>\n    );\n}\n\nNavigationBubble.propTypes = propTypes;\nNavigationBubble.defaultProps = defaultProps;\n\nexport default NavigationBubble;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationBubble from './NavigationBubble';\n\nconst propTypes = {\n    activeItemId: PropTypes.string.isRequired,\n    activeSectionId: PropTypes.string.isRequired,\n    sectionId: PropTypes.string.isRequired,\n    sectionData: PropTypes.object.isRequired,\n    bookmarks: PropTypes.object,\n    showItem: PropTypes.func.isRequired\n};\n\n// class NavSection extends React.Component {\nfunction NavSection(props) {\n    return (\n        <li className=\"nav-section\">\n            <h3 className=\"qti-visually-hidden\">\n                Question Group {props.sectionId} of 2: Shopping in the USA. The remaining time for this group is\n                <span id=\"section_timer\">8 minutes 22 seconds</span>\n            </h3>\n            <fieldset>\n                <legend className=\"qti-visually-hidden\">Shopping in the USA</legend>\n                <ol>\n                {Object.entries(props.sectionData.items).map(([itemId, itemData]) =>\n                    <NavigationBubble\n                        key={itemId}\n                        itemId={itemId}\n                        itemData={itemData}\n                        sectionId={props.sectionId}\n                        isBookmarked={!!props.bookmarks[`${props.sectionId}_${itemId}`]}\n                        isInformational={props.sectionId === 'assessmentSection-1' && itemId === 'item-1'}\n                        isActive={props.sectionId === props.activeSectionId && itemId === props.activeItemId}\n                        isViewed={itemData.viewed}\n                        isAnswered={itemData.answered}\n                        // funcs\n                        showItem={props.showItem}\n                    />\n                )}\n                </ol>\n            </fieldset>\n        </li>\n    );\n}\n\nNavSection.propTypes = propTypes;\n\nexport default NavSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationButton from './NavigationButton';\nimport OverviewButton from './OverviewButton';\nimport NavSection from './NavSection';\n\nconst propTypes = {\n    activeItemId: PropTypes.string.isRequired,\n    activeSectionId: PropTypes.string.isRequired,\n    sectionsMap: PropTypes.object.isRequired,\n    bookmarks: PropTypes.object,\n    moveForward: PropTypes.func,\n    moveBack: PropTypes.func,\n    showItem: PropTypes.func\n};\n\nconst defaultProps = {\n    isBookmarked: false,\n};\n\n// class TestNavigation extends React.Component {\nfunction TestNavigation(props) {\n    return (\n        <nav id=\"navigation\" className=\"testNav\">\n            <h2 className=\"qti-visually-hidden\">Navigation</h2>\n            <NavigationButton dir=\"next\" move={props.moveForward}></NavigationButton>\n            <NavigationButton dir=\"prev\" move={props.moveBack}></NavigationButton>\n            <OverviewButton isFinalItem={props.activeSectionId === 'assessmentSection-3' && props.activeItemId === 'item-5'}></OverviewButton>\n            <ol className=\"testNav-sections\">\n                {Object.entries(props.sectionsMap).map(([sectionId, sectionData]) =>\n                    <NavSection\n                        key={sectionId}\n                        sectionId={sectionId}\n                        sectionData={sectionData}\n                        bookmarks={props.bookmarks}\n                        activeSectionId={props.activeSectionId}\n                        activeItemId={props.activeItemId}\n                        // funcs\n                        showItem={props.showItem}>\n                    </NavSection>\n                )}\n            </ol>\n        </nav>\n    );\n}\n\nTestNavigation.propTypes = propTypes;\nTestNavigation.defaultProps = defaultProps;\n\nexport default TestNavigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { set } from 'object-path-immutable';\n\nimport JumpMenu from './Header/JumpMenu';\nimport Header from './Header/Header';\nimport Item from './Item/Item';\nimport TestNavigation from './Navigation/TestNavigation';\n\nimport '../../css/themes/light.scss';\nimport '../../css/themes/dark.scss';\n\nconst propTypes = {\n    data: PropTypes.object.isRequired,\n};\n\nclass TestRunner extends React.Component {\n\n    constructor(props) {\n        console.log(props);\n        super(props);\n        this.toggleTheme = this.toggleTheme.bind(this);\n        this.moveForward = this.moveForward.bind(this);\n        this.moveBack = this.moveBack.bind(this);\n        this.showItem = this.showItem.bind(this);\n        this.bookmarkItem = this.bookmarkItem.bind(this);\n        this.setResponse = this.setResponse.bind(this);\n\n        this.state = {\n            theme: 'light',\n            sectionsMap: props.data.testMap.parts[\"testPart-1\"].sections,\n            activeSectionId: props.data.testContext.sectionId,\n            activeItemId: props.data.testContext.itemIdentifier,\n            itemAnimation: '',\n            bookmarks: {},\n            responses: {}\n        };\n    }\n\n    componentDidMount() {\n        // start by marking current item as viewed\n        this.markItemViewed({\n            sectionId: this.state.activeSectionId,\n            itemId: this.state.activeItemId\n        });\n    }\n\n    /**\n     * Toggles the test runner theme stylesheet\n     * @affects {TestRunner.state}\n     */\n    toggleTheme() {\n        this.setState((state) => ({\n            theme: state.theme === 'light' ? 'dark' : 'light',\n        }));\n    }\n\n    /**\n     * Toggles the bookmark status for a specific item in the test runner\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    bookmarkItem({ sectionId, itemId }) {\n        const key = `${sectionId}_${itemId}`;\n        this.setState((state) => ({\n            bookmarks: Object.assign(state.bookmarks, {\n                [key]: !state.bookmarks[key]\n            })\n        }));\n    }\n\n    /**\n     * Sets the response variable for a specific item in the test runner\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @param {String} letter\n     * @affects {TestRunner.state}\n     */\n    setResponse({ sectionId, itemId, letter }) {\n        const key = `${sectionId}_${itemId}`;\n        this.setState((state) => ({\n            responses: Object.assign(state.responses, {\n                [key]: letter\n            })\n        }));\n        this.markItemAnswered({ sectionId, itemId });\n    }\n\n    /**\n     * Shows a specific item in the test runner\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    showItem({ sectionId, itemId }) {\n        console.log('Go to', sectionId, 'from', this.state.activeSectionId, 'and', itemId, 'from', this.state.activeItemId);\n\n        // which way to animate?\n        if (sectionId < this.state.activeSectionId) {\n            this.setState({ itemAnimation: 'translateRight' });\n        }\n        else if (sectionId > this.state.activeSectionId) {\n            this.setState({ itemAnimation: 'translateLeft' });\n        }\n        else if (itemId < this.state.activeItemId) {\n            this.setState({ itemAnimation: 'translateRight' });\n        }\n        else if (itemId > this.state.activeItemId) {\n            this.setState({ itemAnimation: 'translateLeft' });\n        }\n        else {\n            this.setState({ itemAnimation: '' });\n        }\n\n        this.setState(() => ({\n            activeSectionId: sectionId,\n            activeItemId: itemId\n            // sectionsMap: set(state.sectionsMap, [sectionId, 'items', itemId, 'viewed'], true)\n        }));\n        this.markItemViewed({ sectionId, itemId });\n    }\n\n    /**\n     * Marks a specific item as viewed\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    markItemViewed({ sectionId, itemId }) {\n        this.setState((state) => ({\n            sectionsMap: set(state.sectionsMap, [sectionId, 'items', itemId, 'viewed'], true)\n        }));\n    }\n\n    /**\n     * Marks a specific item as answered\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    markItemAnswered({ sectionId, itemId }) {\n        this.setState((state) => ({\n            sectionsMap: set(state.sectionsMap, [sectionId, 'items', itemId, 'answered'], true)\n        }));\n    }\n\n    /**\n     * Gets the data pertaining to the active section\n     * @returns {Object} section data\n     */\n    getActiveSection() {\n        return this.state.sectionsMap[this.state.activeSectionId];\n    }\n\n    /**\n     * Gets the data pertaining to the active item\n     * @returns {Object} item data\n     */\n    getActiveItem() {\n        return this.getActiveSection().items[this.state.activeItemId];\n    }\n\n    /**\n     * Gets all the items in a given section\n     * @returns {Object} items as { id: {data} }\n     */\n    getItems(sectionId) {\n        console.log('gi', sectionId);\n        return this.state.sectionsMap[sectionId].items;\n    }\n\n    /**\n     * Gets the identifier of the next section\n     * @returns {String}\n     */\n    getNextSectionId() {\n        const currentSectionPos = this.getActiveSection().position;\n        const nextSection = Object.entries(this.state.sectionsMap).filter(([k, v]) => k && v.position === currentSectionPos + 1)[0];\n        return nextSection ? nextSection[0] : null;\n    }\n\n    /**\n     * Gets the identifier of the previous section\n     * @returns {String}\n     */\n    getPreviousSectionId() {\n        const currentSectionPos = this.getActiveSection().position;\n        const prevSection = Object.entries(this.state.sectionsMap).filter(([k, v]) => k && v.position === currentSectionPos - 1)[0];\n        return prevSection ? prevSection[0] : null;\n    }\n\n    /**\n     * Gets the data pertaining to the previous section\n     * @returns {Object}\n     */\n    getPreviousSection() {\n        const id = this.getPreviousSectionId();\n        return id ? this.state.sectionsMap[id] : null;\n    }\n\n    /**\n     * Moves forward to the next item or section\n     */\n    moveForward() {\n        console.log('mf');\n        const currentPos = this.getActiveItem().positionInSection;\n        const currentSection = this.getActiveSection();\n        const maxPos = Object.keys(currentSection.items).length - 1;\n        if (currentPos < maxPos) {\n            this.moveTo(this.state.activeSectionId, currentPos + 1);\n        }\n        else {\n            const nextSectionId = this.getNextSectionId();\n            if (!nextSectionId) return;\n            this.moveTo(nextSectionId, 0); // ok\n        }\n    }\n\n    /**\n     * Moves back to the previous item or section\n     */\n    moveBack() {\n        console.log('mb');\n        const currentPos = this.getActiveItem().positionInSection;\n        const minPos = 0;\n        if (currentPos > minPos) {\n            this.moveTo(this.state.activeSectionId, currentPos - 1);\n        }\n        else {\n            const previousSectionId = this.getPreviousSectionId();\n            const previousSection = this.getPreviousSection();\n            if (!previousSection) return;\n            const previousSectionEnd = Object.keys(previousSection.items).length - 1;\n            this.moveTo(previousSectionId, previousSectionEnd);\n        }\n    }\n\n    /**\n     * Move anywhere within the test part\n     * @param {String} sectionId\n     * @param {Integer} pos\n     * @affects {TestRunner.state}\n     */\n    moveTo(sectionId, pos) {\n        console.log('moveTo', sectionId, pos);\n        if (typeof sectionId === 'undefined' || typeof pos === 'undefined') return;\n\n        const itemId = Object.entries(this.getItems(sectionId)).filter(([k,v]) => k && v.position === pos )[0][0];\n        this.showItem({ sectionId, itemId });\n    }\n\n    render() {\n        return (\n            <div className={`test-runner theme-${this.state.theme}`}>\n                <JumpMenu></JumpMenu>\n                <Header\n                    testTitle={this.props.data.testData.title}\n                    sectionData={this.state.sectionsMap[this.state.activeSectionId]}\n                    // funcs\n                    toggleTheme={this.toggleTheme}>\n                </Header>\n                <main id=\"main\">\n                    <Item\n                        itemData={this.state.sectionsMap[this.state.activeSectionId].items[this.state.activeItemId]}\n                        sectionId={this.state.activeSectionId}\n                        itemId={this.state.activeItemId}\n                        itemAnimation={this.state.itemAnimation}\n                        isBookmarked={this.state.bookmarks[`${this.state.activeSectionId}_${this.state.activeItemId}`]}\n                        response={this.state.responses[`${this.state.activeSectionId}_${this.state.activeItemId}`]}\n                        // funcs\n                        bookmarkItem={this.bookmarkItem}\n                        setResponse={this.setResponse}>\n                    </Item>\n                </main>\n                <TestNavigation\n                    sectionsMap={this.state.sectionsMap}\n                    bookmarks={this.state.bookmarks}\n                    activeSectionId={this.state.activeSectionId}\n                    activeItemId={this.state.activeItemId}\n                    // funcs\n                    showItem={this.showItem}\n                    moveForward={this.moveForward}\n                    moveBack={this.moveBack}>\n                </TestNavigation>\n            </div>\n        );\n    }\n}\n\nTestRunner.propTypes = propTypes;\n\nexport default TestRunner;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestRunner from './components/TestRunner/TestRunner';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'normalize.css';\nimport './css/App.scss';\nimport './css/tao-a11y-styles.css';\n\nimport data from './data/testData.json';\n\nReactDOM.render(<TestRunner data={data}></TestRunner>, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}