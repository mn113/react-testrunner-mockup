{"version":3,"sources":["ThemeContext.js","components/TestRunner/Header/JumpMenu.js","components/TestRunner/Header/Breadcrumbs.js","components/TestRunner/Header/ToolMenu/ThemeSwitcher.js","components/TestRunner/Header/ToolMenu/ToolMenu.js","components/TestRunner/Header/Header.js","components/TestRunner/Item/Choice.js","components/TestRunner/Item/BookmarkTool.js","components/TestRunner/Item/Item.js","components/TestRunner/Navigation/NavigationButton.js","components/TestRunner/Navigation/OverviewButton.js","components/TestRunner/Navigation/NavigationBubble.js","components/TestRunner/Navigation/NavSection.js","components/TestRunner/Navigation/TestNavigation.js","components/TestRunner/TestRunner.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","ThemeProvider","Provider","Consumer","JumpMenu","className","href","tabIndex","role","Breadcrumbs","testTitle","sectionTitle","sectionNo","sectionsTotal","ThemeSwitcher","props","useState","theme","setTheme","onClick","toggleTheme","ToolMenu","isOpen","toggleOpen","aria-labelledby","id","disabled","Header","aria-label","sectionData","title","position","Choice","isEliminated","toggleEliminated","type","name","group","value","letter","checked","response","onChange","setResponse","bind","dangerouslySetInnerHTML","__html","text","eliminable","e","preventDefault","defaultProps","BookmarkTool","isBookmarked","aria-checked","bookmarkItem","itemId","baseUrl","itemDataFiles","Item","qtiItemData","setQtiItemData","useEffect","document","itemData","console","log","fetch","then","res","json","data","attributes","Object","values","body","elements","prompt","Fragment","key","sectionId","itemAnimation","choices","map","c","identifier","NavigationButton","dir","move","this","OverviewButton","useContext","ThemedButton","styled","button","label","isFinalItem","NavigationBubble","isActive","isViewed","isAnswered","showItem","isInformational","positionInPart","toString","padStart","NavSection","entries","items","bookmarks","activeSectionId","activeItemId","viewed","answered","TestNavigation","moveForward","moveBack","sectionsMap","TestRunner","state","testMap","parts","sections","testContext","itemIdentifier","responses","markItemViewed","setState","assign","markItemAnswered","set","getActiveSection","currentSectionPos","nextSection","filter","k","v","prevSection","getPreviousSectionId","currentPos","getActiveItem","positionInSection","currentSection","keys","length","moveTo","nextSectionId","getNextSectionId","previousSectionId","previousSection","getPreviousSection","previousSectionEnd","pos","getItems","context","testData","Component","contextType","Boolean","window","location","hostname","match","testDataFile","ReactDOM","render","setTestData","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAEMA,EAAeC,IAAMC,eAAc,GAE5BC,EAAgBH,EAAaI,SAG3BJ,GAFcA,EAAaK,SAE3BL,G,6DCMAM,MAXf,WACI,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,uBAAd,aACA,uBAAGC,KAAK,QAAQD,UAAU,YAAYE,SAAS,IAAIC,KAAK,UAAxD,sBACA,uBAAGF,KAAK,cAAcD,UAAU,YAAYE,SAAS,IAAIC,KAAK,UAA9D,sBACA,uBAAGF,KAAK,SAASD,UAAU,YAAYE,SAAS,IAAIC,KAAK,UAAzD,sC,OCcGC,MAZf,YAA4E,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,cACvD,OACI,2BAAOR,UAAU,mBACb,8BAAOK,GACP,0BAAML,UAAU,OAAhB,KACA,yCAAeO,EAAf,OAA8BC,EAA9B,MAAgDF,KCO7CG,MAff,SAAuBC,GAAQ,IAAD,EACFC,mBAAS,SADP,mBACrBC,EADqB,KACdC,EADc,KAQ5B,OACE,4BAAQC,QANU,WAClBJ,EAAMK,cACNF,EAAmB,UAAVD,EAAoB,OAAS,WAItC,oBCkBWI,MAzBf,SAAkBN,GAAQ,IAAD,EACQC,oBAAS,GADjB,mBACdM,EADc,KACNC,EADM,KAKrB,OACI,2BAAOC,kBAAgB,QAAQnB,UAAU,WAAWc,QAHvC,kBAAMI,GAAYD,KAI3B,kBAAC,IAAD,MACA,yBAAKjB,UAAW,eAAiBiB,EAAS,GAAK,wBAC3C,wBAAIG,GAAG,QAAQpB,UAAU,uBAAzB,4BACA,wBAAIoB,GAAG,aAAapB,UAAU,uBAA9B,iBACA,kBAAC,EAAD,CAAee,YAAaL,EAAMK,cAClC,4BAAQM,UAAQ,GAAhB,cACA,4BAAQA,UAAQ,GAAhB,eACA,wBAAIrB,UAAU,uBAAd,eACA,4BAAQqB,UAAQ,GAAhB,uCACA,wBAAIrB,UAAU,uBAAd,yBACA,4BAAQqB,UAAQ,GAAhB,yBCQDC,MAtBf,SAAgBZ,GACd,OACE,4BAAQV,UAAU,WACd,4BAAQuB,aAAW,YAAYvB,UAAU,eACrC,kBAAC,IAAD,OAEJ,wBAAIoB,GAAG,mBACH,kBAAC,EAAD,CACIf,UAAWK,EAAML,UACjBC,aAAcI,EAAMc,YAAYC,MAChClB,UAAWG,EAAMc,YAAYE,SAAW,EACxClB,cAAe,IAEnB,0BAAMR,UAAU,QAAQoB,GAAG,aAAaG,aAAW,iCAAnD,UAEJ,kBAAC,EAAD,CAAUR,YAAaL,EAAMK,gBCXrC,SAASY,EAAOjB,GAAQ,IAAD,EACsBC,oBAAS,GAD/B,mBACZiB,EADY,KACEC,EADF,KAQnB,OACI,yBAAK7B,UAAW,eAAiB4B,EAAe,aAAe,KAC3D,+BACI,2BACIE,KAAK,QACLC,KAAMrB,EAAMsB,MACZC,MAAK,UAAKvB,EAAMsB,MAAX,kBAA0BtB,EAAMwB,QACrCC,QAASzB,EAAM0B,WAAa1B,EAAMwB,OAClCG,SAAU3B,EAAM4B,YAAYC,KAAK,KAAM7B,KAE3C,0BAAM8B,wBAAyB,CAAEC,OAAO,GAAD,OAAK/B,EAAMwB,OAAX,aAAsBxB,EAAMgC,UAEtEhC,EAAMiC,YAAc,4BAAQ7B,QAjBnB,SAAC8B,GACfA,EAAEC,iBACFhB,GAAkBD,KAeoCA,EAAe,MAAQ,IAApD,mBAAyElB,EAAMwB,SAMhHP,EAAOmB,aA9Bc,CACjBH,YAAY,GA+BDhB,QC9Bf,SAASoB,EAAarC,GAClB,OACI,yBAAKV,UAAW,kBAAoBU,EAAMsC,aAAe,aAAe,KACpE,wBAAI5B,GAAG,aAAapB,UAAU,uBAA9B,mBACA,4BACIG,KAAK,SACL8C,eAAa,QACbjD,UAAU,wCACVc,QAASJ,EAAMwC,aAAaX,KAAK,KAAM7B,IACvC,kBAAC,IAAD,MACA,0BAAMV,UAAU,uBAAhB,iBAAqDU,EAAMyC,OAA3D,iBAOhBJ,EAAaD,aArBQ,CACjBE,cAAc,GAsBHD,QCjBTK,EAAU,QACVC,EAAgB,CAAC,mBAAoB,mBAAoB,oBA4EhDC,MA1Ef,SAAc5C,GAAO,MAEqBC,mBAAS,MAF9B,mBAEV4C,EAFU,KAEGC,EAFH,KAqBjB,OAhBAC,qBAAU,WAENC,SAASjC,MAAQf,EAAMiD,SAASlC,MAGhCmC,QAAQC,IAAI,wBACZC,MAAM,GAAD,OAAIV,EAAJ,YAAeC,EAAc3C,EAAMiD,SAASjC,SAAW,KACvDqC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHN,QAAQC,IAAIK,EAAKC,WAAW1C,MAAO2C,OAAOC,OAAOH,EAAKI,KAAKC,UAAU,GAAGC,OAAOF,MAE/Ed,EAAeU,QAGxB,CAACxD,EAAMiD,SAASlC,QAEZ8B,GACH,kBAAC,IAAMkB,SAAP,KACI,6BACItD,kBAAgB,iBAChBuD,IAAG,UAAKhE,EAAMiE,UAAX,YAAwBjE,EAAMyC,QACjCnD,UAAW,qBAAuBU,EAAMkE,eAExC,wBAAIxD,GAAG,iBAAiBpB,UAAU,uBAAlC,YACcU,EAAMyC,OADpB,2CACoEzC,EAAMiE,UAD1E,UAIA,6BAASpD,aAAW,mBAChB,wBAAIH,GAAG,iBAAgB,0BAAMpB,UAAU,uBAAhB,aAAuDU,EAAMiD,SAASlC,OAC7F,0BAAMe,wBAAyB,CAAEC,OAAQc,EAAYe,KAAKA,SAG9D,6BAAS/C,aAAW,YAChB,wBAAIvB,UAAU,UACV,0BAAMA,UAAU,uBAAhB,cACCoE,OAAOC,OAAOd,EAAYe,KAAKC,UAAU,GAAGC,OAAOF,MAGxD,yBAAKtE,UAAU,eACVoE,OAAOC,OAAOD,OAAOC,OAAOd,EAAYe,KAAKC,UAAU,GAAGM,SAASC,KAAI,SAACC,GAAD,OACpE,kBAAC,EAAD,CACI/C,MAAK,UAAKtB,EAAMiE,UAAX,YAAwBjE,EAAMyC,QACnCuB,IAAKK,EAAEC,WACP9C,OAAQ6C,EAAEC,WACVtC,KAAMqC,EAAET,KAAKA,KACb3B,YAAY,EACZgC,UAAWjE,EAAMiE,UACjBxB,OAAQzC,EAAMyC,OACdf,SAAU1B,EAAM0B,SAEhBE,YAAa5B,EAAM4B,oBAMvC,kBAAC,EAAD,CACIa,OAAQzC,EAAMyC,OACdwB,UAAWjE,EAAMiE,UACjB3B,aAActC,EAAMsC,aAEpBE,aAAcxC,EAAMwC,iBC/CrB+B,MA5Bf,SAA0BvE,GACxB,MAAkB,SAAdA,EAAMwE,IAEN,4BACE3D,aAAW,0BACXvB,UAAU,uDACViC,MAAM,OACNnB,QAASJ,EAAMyE,KAAK5C,KAAK6C,OACzB,kBAAC,IAAD,OAIiB,SAAd1E,EAAMwE,IAEX,4BACE3D,aAAW,sBACXvB,UAAU,qDACViC,MAAM,OACNnB,QAASJ,EAAMyE,KAAK5C,KAAK6C,OACzB,kBAAC,IAAD,OAIC,M,+fCnBT,SAASC,EAAe3E,GACtB,IAAME,EAAQ0E,qBAAW7F,GAEnB8F,EAAeC,IAAOC,OAAV,IAWS,UAAV7E,EAAoB,QAAU,OAElB,UAAVA,EAAoB,QAAU,UAC3B,UAAVA,EAAoB,QAAU,QAEL,UAAVA,EAAoB,UAAY,UAC1B,UAAVA,EAAoB,UAAY,UAC7B,UAAVA,EAAoB,QAAU,SAI1C8E,EAAQ,WAGZ,OAFIhF,EAAMiF,cAAaD,GAAS,aAG9B,kBAACH,EAAD,CAAcvF,UAAW,yBAA2BY,EAAOW,aAAYmE,EAAOtE,GAAG,YAC/E,kBAAC,IAAD,MAA4BsE,GAMlCL,EAAevC,aAxCM,CACnB6C,aAAa,GAyCAN,Q,gBC9Bf,SAASO,EAAiBlF,GACtB,OACI,wBAAIV,UAAW,cAAgBU,EAAMmF,SAAW,UAAY,KAAOnF,EAAMoF,SAAW,UAAY,KAAOpF,EAAMqF,WAAa,YAAc,KACpI,uBACI/F,UAAU,iBACVuB,aAAA,mBAAwBb,EAAMyC,OAA9B,YAAwCzC,EAAMqF,WAAa,aAAe,IAC1EjF,QAASJ,EAAMsF,SAASzD,KAAK,KAAM7B,IACjCA,EAAMuF,iBAAmB,kBAAC,IAAD,CAAajG,UAAU,mBAC/CU,EAAMuF,kBAAoBvF,EAAMiD,SAASuC,eAAiB,GAAGC,WAAWC,SAAS,EAAE,KACpF1F,EAAMsC,cAAgB,kBAAC,IAAD,CAAYhD,UAAU,qBAO9D4F,EAAiB9C,aArBI,CACjBmD,iBAAiB,GAsBNL,QCOAS,MAjCf,SAAoB3F,GAChB,OACI,wBAAIV,UAAU,eACV,wBAAIA,UAAU,uBAAd,kBACoBU,EAAMiE,UAD1B,mEAEI,0BAAMvD,GAAG,iBAAT,yBAEJ,kCACI,4BAAQpB,UAAU,uBAAlB,uBACA,4BACCoE,OAAOkC,QAAQ5F,EAAMc,YAAY+E,OAAOzB,KAAI,mCAAE3B,EAAF,KAAUQ,EAAV,YACzC,kBAAC,EAAD,CACIe,IAAKvB,EACLA,OAAQA,EACRQ,SAAUA,EACVgB,UAAWjE,EAAMiE,UACjB3B,eAAgBtC,EAAM8F,UAAN,UAAmB9F,EAAMiE,UAAzB,YAAsCxB,IACtD8C,gBAAqC,wBAApBvF,EAAMiE,WAAkD,WAAXxB,EAC9D0C,SAAUnF,EAAMiE,YAAcjE,EAAM+F,iBAAmBtD,IAAWzC,EAAMgG,aACxEZ,SAAUnC,EAASgD,OACnBZ,WAAYpC,EAASiD,SAErBZ,SAAUtF,EAAMsF,kBCfxC,SAASa,EAAenG,GACpB,OACI,yBAAKU,GAAG,aAAapB,UAAU,WAC3B,wBAAIA,UAAU,uBAAd,cACA,kBAAC,EAAD,CAAkBkF,IAAI,OAAOC,KAAMzE,EAAMoG,cACzC,kBAAC,EAAD,CAAkB5B,IAAI,OAAOC,KAAMzE,EAAMqG,WACzC,kBAAC,EAAD,CAAgBpB,YAAuC,wBAA1BjF,EAAM+F,iBAAoE,WAAvB/F,EAAMgG,eACtF,wBAAI1G,UAAU,oBACToE,OAAOkC,QAAQ5F,EAAMsG,aAAalC,KAAI,mCAAEH,EAAF,KAAanD,EAAb,YACnC,kBAAC,EAAD,CACIkD,IAAKC,EACLA,UAAWA,EACXnD,YAAaA,EACbgF,UAAW9F,EAAM8F,UACjBC,gBAAiB/F,EAAM+F,gBACvBC,aAAchG,EAAMgG,aAEpBV,SAAUtF,EAAMsF,gBASxCa,EAAe/D,aA/BM,CACjBE,cAAc,GAgCH6D,QC/BTI,G,wBAEF,WAAYvG,GAAQ,IAAD,6BACfkD,QAAQC,IAAInD,IACZ,4CAAMA,KACDoG,YAAc,EAAKA,YAAYvE,KAAjB,gBACnB,EAAKwE,SAAW,EAAKA,SAASxE,KAAd,gBAChB,EAAKyD,SAAW,EAAKA,SAASzD,KAAd,gBAChB,EAAKW,aAAe,EAAKA,aAAaX,KAAlB,gBACpB,EAAKD,YAAc,EAAKA,YAAYC,KAAjB,gBAEnB,EAAK2E,MAAQ,CACTF,YAAatG,EAAMwD,KAAKiD,QAAQC,MAAM,cAAcC,SACpDZ,gBAAiB/F,EAAMwD,KAAKoD,YAAY3C,UACxC+B,aAAchG,EAAMwD,KAAKoD,YAAYC,eACrC3C,cAAe,GACf4B,UAAW,GACXgB,UAAW,IAfA,E,iFAqBfpC,KAAKqC,eAAe,CAChB9C,UAAWS,KAAK8B,MAAMT,gBACtBtD,OAAQiC,KAAK8B,MAAMR,iB,sCAUU,IAAtB/B,EAAqB,EAArBA,UAAWxB,EAAU,EAAVA,OAChBuB,EAAG,UAAMC,EAAN,YAAmBxB,GAC5BiC,KAAKsC,UAAS,SAACR,GAAD,MAAY,CACtBV,UAAWpC,OAAOuD,OAAOT,EAAMV,UAApBpC,OAAA,IAAAA,CAAA,GACNM,GAAOwC,EAAMV,UAAU9B,W,qCAYQ,IAA9BC,EAA6B,EAA7BA,UAAWxB,EAAkB,EAAlBA,OAAQjB,EAAU,EAAVA,OACvBwC,EAAG,UAAMC,EAAN,YAAmBxB,GAC5BiC,KAAKsC,UAAS,SAACR,GAAD,MAAY,CACtBM,UAAWpD,OAAOuD,OAAOT,EAAMM,UAApBpD,OAAA,IAAAA,CAAA,GACNM,EAAMxC,QAGfkD,KAAKwC,iBAAiB,CAAEjD,YAAWxB,a,kCASN,IAAtBwB,EAAqB,EAArBA,UAAWxB,EAAU,EAAVA,OAClBS,QAAQC,IAAI,QAASc,EAAW,OAAQS,KAAK8B,MAAMT,gBAAiB,MAAOtD,EAAQ,OAAQiC,KAAK8B,MAAMR,cAGlG/B,EAAYS,KAAK8B,MAAMT,gBACvBrB,KAAKsC,SAAS,CAAE9C,cAAe,mBAE1BD,EAAYS,KAAK8B,MAAMT,gBAC5BrB,KAAKsC,SAAS,CAAE9C,cAAe,kBAE1BzB,EAASiC,KAAK8B,MAAMR,aACzBtB,KAAKsC,SAAS,CAAE9C,cAAe,mBAE1BzB,EAASiC,KAAK8B,MAAMR,aACzBtB,KAAKsC,SAAS,CAAE9C,cAAe,kBAG/BQ,KAAKsC,SAAS,CAAE9C,cAAe,KAGnCQ,KAAKsC,UAAS,iBAAO,CACjBjB,gBAAiB9B,EACjB+B,aAAcvD,MAGlBiC,KAAKqC,eAAe,CAAE9C,YAAWxB,a,wCASE,IAAtBwB,EAAqB,EAArBA,UAAWxB,EAAU,EAAVA,OACxBiC,KAAKsC,UAAS,SAACR,GAAD,MAAY,CACtBF,YAAaa,YAAIX,EAAMF,YAAa,CAACrC,EAAW,QAASxB,EAAQ,WAAW,S,0CAU3C,IAAtBwB,EAAqB,EAArBA,UAAWxB,EAAU,EAAVA,OAC1BiC,KAAKsC,UAAS,SAACR,GAAD,MAAY,CACtBF,YAAaa,YAAIX,EAAMF,YAAa,CAACrC,EAAW,QAASxB,EAAQ,aAAa,S,yCASlF,OAAOiC,KAAK8B,MAAMF,YAAY5B,KAAK8B,MAAMT,mB,sCAQzC,OAAOrB,KAAK0C,mBAAmBvB,MAAMnB,KAAK8B,MAAMR,gB,+BAO3C/B,GACL,OAAOS,KAAK8B,MAAMF,YAAYrC,GAAW4B,Q,yCAQzC,IAAMwB,EAAoB3C,KAAK0C,mBAAmBpG,SAC5CsG,EAAc5D,OAAOkC,QAAQlB,KAAK8B,MAAMF,aAAaiB,QAAO,mCAAEC,EAAF,KAAKC,EAAL,YAAYD,GAAKC,EAAEzG,WAAaqG,EAAoB,KAAG,GACzH,OAAOC,EAAcA,EAAY,GAAK,O,6CAQtC,IAAMD,EAAoB3C,KAAK0C,mBAAmBpG,SAC5C0G,EAAchE,OAAOkC,QAAQlB,KAAK8B,MAAMF,aAAaiB,QAAO,mCAAEC,EAAF,KAAKC,EAAL,YAAYD,GAAKC,EAAEzG,WAAaqG,EAAoB,KAAG,GACzH,OAAOK,EAAcA,EAAY,GAAK,O,2CAQtC,IAAMhH,EAAKgE,KAAKiD,uBAChB,OAAOjH,EAAKgE,KAAK8B,MAAMF,YAAY5F,GAAM,O,oCAOzC,IAAMkH,EAAalD,KAAKmD,gBAAgBC,kBAClCC,EAAiBrD,KAAK0C,mBAE5B,GAAIQ,EADWlE,OAAOsE,KAAKD,EAAelC,OAAOoC,OAAS,EAEtDvD,KAAKwD,OAAOxD,KAAK8B,MAAMT,gBAAiB6B,EAAa,OAEpD,CACD,IAAMO,EAAgBzD,KAAK0D,mBAC3B,IAAKD,EAAe,OACpBzD,KAAKwD,OAAOC,EAAe,M,iCAQ/B,IAAMP,EAAalD,KAAKmD,gBAAgBC,kBAExC,GAAIF,EADW,EAEXlD,KAAKwD,OAAOxD,KAAK8B,MAAMT,gBAAiB6B,EAAa,OAEpD,CACD,IAAMS,EAAoB3D,KAAKiD,uBACzBW,EAAkB5D,KAAK6D,qBAC7B,IAAKD,EAAiB,OACtB,IAAME,EAAqB9E,OAAOsE,KAAKM,EAAgBzC,OAAOoC,OAAS,EACvEvD,KAAKwD,OAAOG,EAAmBG,M,6BAUhCvE,EAAWwE,GACd,GAAyB,qBAAdxE,GAA4C,qBAARwE,EAA/C,CAEA,IAAMhG,EAASiB,OAAOkC,QAAQlB,KAAKgE,SAASzE,IAAYsD,QAAO,mCAAEC,EAAF,KAAIC,EAAJ,YAAWD,GAAKC,EAAEzG,WAAayH,KAAM,GAAG,GACvG/D,KAAKY,SAAS,CAAErB,YAAWxB,c,+BAI3B,OACI,yBAAKnD,UAAS,4BAAuBoF,KAAKiE,UACtC,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIhJ,UAAW+E,KAAK1E,MAAMwD,KAAKoF,SAAS7H,MACpCD,YAAa4D,KAAK8B,MAAMF,YAAY5B,KAAK8B,MAAMT,iBAE/C1F,YAAaqE,KAAK1E,MAAMK,cAE5B,0BAAMK,GAAG,QACL,kBAAC,EAAD,CACIuC,SAAUyB,KAAK8B,MAAMF,YAAY5B,KAAK8B,MAAMT,iBAAiBF,MAAMnB,KAAK8B,MAAMR,cAC9E/B,UAAWS,KAAK8B,MAAMT,gBACtBtD,OAAQiC,KAAK8B,MAAMR,aACnB9B,cAAeQ,KAAK8B,MAAMtC,cAC1B5B,aAAcoC,KAAK8B,MAAMV,UAAX,UAAwBpB,KAAK8B,MAAMT,gBAAnC,YAAsDrB,KAAK8B,MAAMR,eAC/EtE,SAAUgD,KAAK8B,MAAMM,UAAX,UAAwBpC,KAAK8B,MAAMT,gBAAnC,YAAsDrB,KAAK8B,MAAMR,eAE3ExD,aAAckC,KAAKlC,aACnBZ,YAAa8C,KAAK9C,eAG1B,kBAAC,EAAD,CACI0E,YAAa5B,KAAK8B,MAAMF,YACxBR,UAAWpB,KAAK8B,MAAMV,UACtBC,gBAAiBrB,KAAK8B,MAAMT,gBAC5BC,aAActB,KAAK8B,MAAMR,aAEzBV,SAAUZ,KAAKY,SACfc,YAAa1B,KAAK0B,YAClBC,SAAU3B,KAAK2B,gB,GA3PVrH,IAAM6J,YAiQ/BtC,EAAWuC,YAAc/J,EAIVwH,QC3QKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCPAzG,EAAU,QACV0G,EAAe,gBA4BrBC,IAASC,OAAO,mBA1BhB,WAAgB,IAAD,EACerJ,mBAAS,SADxB,mBACJC,EADI,KACGC,EADH,OAEqBF,mBAAS,MAF9B,mBAEJ2I,EAFI,KAEMW,EAFN,KAmBX,OAVAxG,qBAAU,WACNG,QAAQC,IAAI,wBACZC,MAAM,GAAD,OAAIV,EAAJ,YAAe0G,IACf/F,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHN,QAAQC,IAAIK,GACZ+F,EAAY/F,QAErB,IAEIoF,GACH,kBAAC1J,EAAD,CAAeqC,MAAOrB,EAAO8D,IAAKN,OAAOsE,KAAKY,GAAU,IACpD,kBAAC,EAAD,CAAYpF,KAAMoF,EAAUvI,YAjBpC,WACIF,GAAS,SAAAD,GAAK,MAAe,UAAVA,EAAoB,OAAS,iBAqBxC,MAAS8C,SAASwG,eAAe,QDyF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtG,MAAK,SAAAuG,GACjCA,EAAaC,kB","file":"static/js/main.0f87ddbf.chunk.js","sourcesContent":["import React from 'react';\n\nconst ThemeContext = React.createContext(true);\n\nexport const ThemeProvider = ThemeContext.Provider;\nexport const ThemeConsumer = ThemeContext.Consumer;\n\nexport default ThemeContext;\n","import React from 'react';\n\nfunction JumpMenu() {\n    return (\n        <nav className=\"jump-menu\">\n            <h2 className=\"qti-visually-hidden\">Skip menu</h2>\n            <a href=\"#main\" className=\"jump-link\" tabIndex=\"0\" role=\"button\">Skip to question 7</a>\n            <a href=\"#navigation\" className=\"jump-link\" tabIndex=\"0\" role=\"button\">Skip to navigation</a>\n            <a href=\"#tools\" className=\"jump-link\" tabIndex=\"0\" role=\"button\">Skip to tool box & configuration</a>\n        </nav>\n    );\n}\n\nexport default JumpMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    testTitle: PropTypes.string.isRequired,\n    sectionTitle: PropTypes.string.isRequired,\n    sectionNo: PropTypes.number.isRequired,\n    sectionsTotal: PropTypes.number.isRequired,\n};\n\nfunction Breadcrumbs({ testTitle, sectionTitle, sectionNo, sectionsTotal}) {\n    return (\n        <aside className=\"test-breadcrumb\">\n            <span>{testTitle}</span>\n            <span className=\"sep\">/</span>\n            <span>Section {sectionNo} of {sectionsTotal} : {sectionTitle}</span>\n        </aside>\n    );\n}\n\nBreadcrumbs.propTypes = propTypes;\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  toggleTheme: PropTypes.func.isRequired\n};\n\nfunction ThemeSwitcher(props) {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    props.toggleTheme();\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <button onClick={toggleTheme}>Light/dark mode</button>\n  );\n}\n\nThemeSwitcher.propTypes = propTypes;\n\nexport default ThemeSwitcher;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ThemeSwitcher from './ThemeSwitcher';\nimport { FiSettings } from \"react-icons/fi\";\n\nconst propTypes = {\n    toggleTheme: PropTypes.func\n};\n\nfunction ToolMenu(props) {\n    const [isOpen, toggleOpen] = useState(false);\n\n    const showHide = () => toggleOpen(!isOpen);\n\n    return (\n        <aside aria-labelledby=\"tools\" className=\"toolMenu\" onClick={showHide}>\n            <FiSettings></FiSettings>\n            <div className={'popup-menu ' + (isOpen ? '' : 'qti-visually-hidden')}>\n                <h2 id=\"tools\" className=\"qti-visually-hidden\">tool box & configuration</h2>\n                <h3 id=\"tool_title\" className=\"qti-visually-hidden\">My Test Tools</h3>\n                <ThemeSwitcher toggleTheme={props.toggleTheme}></ThemeSwitcher>\n                <button disabled>Calculator</button>\n                <button disabled>Highlighter</button>\n                <h3 className=\"qti-visually-hidden\">My Exhibits</h3>\n                <button disabled>Exhibit: Periodic Table of Elements</button>\n                <h3 className=\"qti-visually-hidden\">My Test Configuration</h3>\n                <button disabled>Test Configuration</button>\n            </div>\n        </aside>\n    );\n}\n\nToolMenu.propTypes = propTypes;\n\nexport default ToolMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiMenu } from \"react-icons/fi\";\nimport Breadcrumbs from './Breadcrumbs';\nimport ToolMenu from './ToolMenu/ToolMenu';\n\nconst propTypes = {\n  testTitle: PropTypes.string,\n  sectionData: PropTypes.object.isRequired,\n  toggleTheme: PropTypes.func\n};\n\nfunction Header(props) {\n  return (\n    <header className=\"top-bar\">\n        <button aria-label=\"main menu\" className=\"menu-button\">\n            <FiMenu></FiMenu>\n        </button>\n        <h1 id=\"assessment_name\">\n            <Breadcrumbs\n                testTitle={props.testTitle}\n                sectionTitle={props.sectionData.title}\n                sectionNo={props.sectionData.position + 1}\n                sectionsTotal={3}>\n            </Breadcrumbs>\n            <span className=\"timer\" id=\"demo-timer\" aria-label=\"Time remaining in this part: \">09:59</span>\n        </h1>\n        <ToolMenu toggleTheme={props.toggleTheme}></ToolMenu>\n    </header>\n  );\n}\n\nHeader.propTypes = propTypes;\n\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    text: PropTypes.string,\n    group: PropTypes.string,\n    letter: PropTypes.string,\n    eliminable: PropTypes.bool,\n    response: PropTypes.string,\n    setResponse: PropTypes.func\n};\n\nconst defaultProps = {\n    eliminable: false\n};\n\nfunction Choice(props) {\n    const [isEliminated, toggleEliminated] = useState(false);\n\n    const eliminate = (e) => {\n        e.preventDefault();\n        toggleEliminated(!isEliminated);\n    };\n\n    return (\n        <div className={'qti-choice ' + (isEliminated ? 'eliminated' : '')}>\n            <label>\n                <input\n                    type=\"radio\"\n                    name={props.group}\n                    value={`${props.group}_choice${props.letter}`}\n                    checked={props.response === props.letter}\n                    onChange={props.setResponse.bind(null, props)}\n                />\n                <span dangerouslySetInnerHTML={{ __html: `${props.letter}. ${props.text}` }}></span>\n            </label>\n            {props.eliminable && <button onClick={eliminate}>{isEliminated ? 'Une' : 'E'}liminate answer {props.letter}</button>}\n        </div>\n    );\n}\n\nChoice.propTypes = propTypes;\nChoice.defaultProps = defaultProps;\n\nexport default Choice;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiBookmark } from \"react-icons/fi\";\n\nconst propTypes = {\n    itemId: PropTypes.string.isRequired,\n    isBookmarked: PropTypes.bool,\n    bookmarkItem: PropTypes.func\n};\n\nconst defaultProps = {\n    isBookmarked: false,\n};\n\nfunction BookmarkTool(props) {\n    return (\n        <div className={'bookmark-tool ' + (props.isBookmarked ? 'bookmarked' : '')}>\n            <h3 id=\"flag_title\" className=\"qti-visually-hidden\">Flag for review</h3>\n            <button\n                role=\"switch\"\n                aria-checked=\"false\"\n                className=\"button-large-circle scaling secondary\"\n                onClick={props.bookmarkItem.bind(null, props)}>\n                <FiBookmark></FiBookmark>\n                <span className=\"qti-visually-hidden\">Flag Question {props.itemId} for review</span>\n            </button>\n        </div>\n    );\n}\n\nBookmarkTool.propTypes = propTypes;\nBookmarkTool.defaultProps = defaultProps;\n\nexport default BookmarkTool;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Choice from './Choice';\nimport BookmarkTool from './BookmarkTool';\n\nconst propTypes = {\n    itemId: PropTypes.string.isRequired,\n    sectionId: PropTypes.string.isRequired,\n    itemAnimation: PropTypes.string,\n    itemData: PropTypes.object.isRequired,\n    response: PropTypes.string,\n    setResponse: PropTypes.func.isRequired,\n    isBookmarked: PropTypes.bool,\n    bookmarkItem: PropTypes.func\n};\n\nconst baseUrl = '/data';\nconst itemDataFiles = ['choiceItem1.json', 'choiceItem2.json', 'choiceItem3.json'];\n\nfunction Item(props) {\n    // let qtiItemData = null;\n    const [qtiItemData, setQtiItemData] = useState(null); // to block initial render\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // Update the document title using the browser API\n        document.title = props.itemData.title;\n\n        // Fetch item data from a semi-random json file\n        console.log('fetching itemData...');\n        fetch(`${baseUrl}/${itemDataFiles[props.itemData.position % 3]}`)\n            .then(res => res.json())\n            .then((data) => {\n                console.log(data.attributes.title, Object.values(data.body.elements)[0].prompt.body);\n                // qtiItemData = data;\n                setQtiItemData(data); // to force render\n            });\n\n    }, [props.itemData.title]);\n\n    return qtiItemData && (\n        <React.Fragment>\n            <article\n                aria-labelledby=\"question_title\"\n                key={`${props.sectionId}_${props.itemId}`}\n                className={'qti-itemBody anim-' + props.itemAnimation}\n            >\n                <h2 id=\"question_title\" className=\"qti-visually-hidden\">\n                    Question {props.itemId} of 14  - unanswered. In Question Group {props.sectionId} of 2.\n                </h2>\n\n                <section aria-label=\"reading passage\">\n                    <h3 id=\"passage_title\"><span className=\"not-visually-hidden\">Passage: </span>{props.itemData.title}</h3>\n                    <span dangerouslySetInnerHTML={{ __html: qtiItemData.body.body }}></span>\n                </section>\n\n                <section aria-label=\"question\">\n                    <h3 className=\"prompt\">\n                        <span className=\"qti-visually-hidden\">Question: </span>\n                        {Object.values(qtiItemData.body.elements)[0].prompt.body}\n                    </h3>\n\n                    <div className=\"qti-choices\">\n                        {Object.values(Object.values(qtiItemData.body.elements)[0].choices).map((c) => (\n                            <Choice\n                                group={`${props.sectionId}_${props.itemId}`}\n                                key={c.identifier}\n                                letter={c.identifier}\n                                text={c.body.body}\n                                eliminable={true}\n                                sectionId={props.sectionId}\n                                itemId={props.itemId}\n                                response={props.response}\n                                // funcs\n                                setResponse={props.setResponse}>\n                            </Choice>\n                        ))}\n                    </div>\n                </section>\n            </article>\n            <BookmarkTool\n                itemId={props.itemId}\n                sectionId={props.sectionId}\n                isBookmarked={props.isBookmarked}\n                // funcs\n                bookmarkItem={props.bookmarkItem}>\n            </BookmarkTool>\n        </React.Fragment>\n    );\n}\n\nItem.propTypes = propTypes;\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport { FiArrowRight } from 'react-icons/fi';\n\nconst propTypes = {\n  move: PropTypes.func.isRequired,\n  dir: PropTypes.string.isRequired\n};\n\nfunction NavigationButton(props) {\n  if (props.dir === 'prev') {\n    return (\n      <button\n        aria-label=\"go to previous question\"\n        className=\"button-large-circle navButton scaling prev secondary\"\n        value=\"prev\"\n        onClick={props.move.bind(this)}>\n        <FiArrowLeft></FiArrowLeft>\n      </button>\n    );\n  }\n  else if (props.dir === 'next') {\n    return (\n      <button\n        aria-label=\"go to next question\"\n        className=\"button-large-circle navButton scaling next primary\"\n        value=\"next\"\n        onClick={props.move.bind(this)}>\n        <FiArrowRight></FiArrowRight>\n      </button>\n    );\n  }\n  return null;\n}\n\nNavigationButton.propTypes = propTypes;\n\nexport default NavigationButton;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiChevronUp } from 'react-icons/fi';\nimport ThemeContext from '../../../ThemeContext';\nimport styled from 'styled-components';\n\nconst propTypes = {\n  isFinalItem: PropTypes.bool\n};\n\nconst defaultProps = {\n  isFinalItem: false,\n};\n\nfunction OverviewButton(props) {\n  const theme = useContext(ThemeContext);\n\n  const ThemedButton = styled.button`\n    height: 36px;\n    width: unset;\n    border-radius: 18px;\n    text-transform: uppercase;\n    order: 3;\n    font-size: 0.85rem;\n    display: flex;\n    align-items: center;\n    line-height: 1;\n    padding: 0.2rem 0.6rem;\n    background: ${ theme === 'light' ? 'white' : '#444' };\n    border: 2px solid;\n    border-color: ${ theme === 'light' ? 'black' : '#767676' };\n    color: ${ theme === 'light' ? 'black' : 'white' };\n    &:hover {\n        background-color: ${ theme === 'light' ? '#4469bb' : '#da4045' };\n        border-color: ${ theme === 'light' ? '#4469bb' : '#da4045' };\n        color: ${ theme === 'light' ? 'white' : 'black' };\n    }\n  `;\n\n  let label = 'Overview';\n  if (props.isFinalItem) label += ' & Submit';\n\n  return (\n    <ThemedButton className={'overview-button theme-' + theme} aria-label={label} id=\"overview\">\n      <FiChevronUp></FiChevronUp>{label}\n    </ThemedButton>\n  );\n}\n\nOverviewButton.propTypes = propTypes;\nOverviewButton.defaultProps = defaultProps;\n\nexport default OverviewButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TiInfoLarge } from 'react-icons/ti';\nimport { FaBookmark } from 'react-icons/fa';\n\nconst propTypes = {\n    showItem: PropTypes.func.isRequired,\n    itemId: PropTypes.string.isRequired,\n    sectionId: PropTypes.string.isRequired,\n    itemData: PropTypes.object,\n    isInformational: PropTypes.bool,\n    isActive: PropTypes.bool,\n    isViewed: PropTypes.bool,\n    isAnswered: PropTypes.bool,\n    isBookmarked: PropTypes.bool\n};\n\nconst defaultProps = {\n    isInformational: false,\n};\n\n// class NavigationBubble extends React.Component {\nfunction NavigationBubble(props) {\n    return (\n        <li className={'navBubble ' + (props.isActive ? 'active ' : '') + (props.isViewed ? 'viewed ' : '') + (props.isAnswered ? 'answered ' : '')}>\n            <a\n                className=\"bubble-content\"\n                aria-label={`Question ${props.itemId} ${props.isAnswered ? '(Answered)' : ''}`}\n                onClick={props.showItem.bind(null, props)}>\n                { props.isInformational && <TiInfoLarge className=\"informational\"></TiInfoLarge> }\n                { !props.isInformational && (props.itemData.positionInPart + 1).toString().padStart(2,'0') }\n                { props.isBookmarked && <FaBookmark className=\"mini-indicator\"></FaBookmark>}\n            </a>\n        </li>\n    );\n}\n\nNavigationBubble.propTypes = propTypes;\nNavigationBubble.defaultProps = defaultProps;\n\nexport default NavigationBubble;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationBubble from './NavigationBubble';\n\nconst propTypes = {\n    activeItemId: PropTypes.string.isRequired,\n    activeSectionId: PropTypes.string.isRequired,\n    sectionId: PropTypes.string.isRequired,\n    sectionData: PropTypes.object.isRequired,\n    bookmarks: PropTypes.object,\n    showItem: PropTypes.func.isRequired\n};\n\n// class NavSection extends React.Component {\nfunction NavSection(props) {\n    return (\n        <li className=\"nav-section\">\n            <h3 className=\"qti-visually-hidden\">\n                Question Group {props.sectionId} of 2: Shopping in the USA. The remaining time for this group is\n                <span id=\"section_timer\">8 minutes 22 seconds</span>\n            </h3>\n            <fieldset>\n                <legend className=\"qti-visually-hidden\">Shopping in the USA</legend>\n                <ol>\n                {Object.entries(props.sectionData.items).map(([itemId, itemData]) =>\n                    <NavigationBubble\n                        key={itemId}\n                        itemId={itemId}\n                        itemData={itemData}\n                        sectionId={props.sectionId}\n                        isBookmarked={!!props.bookmarks[`${props.sectionId}_${itemId}`]}\n                        isInformational={props.sectionId === 'assessmentSection-1' && itemId === 'item-1'}\n                        isActive={props.sectionId === props.activeSectionId && itemId === props.activeItemId}\n                        isViewed={itemData.viewed}\n                        isAnswered={itemData.answered}\n                        // funcs\n                        showItem={props.showItem}\n                    />\n                )}\n                </ol>\n            </fieldset>\n        </li>\n    );\n}\n\nNavSection.propTypes = propTypes;\n\nexport default NavSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationButton from './NavigationButton';\nimport OverviewButton from './OverviewButton';\nimport NavSection from './NavSection';\n\nconst propTypes = {\n    activeItemId: PropTypes.string.isRequired,\n    activeSectionId: PropTypes.string.isRequired,\n    sectionsMap: PropTypes.object.isRequired,\n    bookmarks: PropTypes.object,\n    moveForward: PropTypes.func,\n    moveBack: PropTypes.func,\n    showItem: PropTypes.func\n};\n\nconst defaultProps = {\n    isBookmarked: false,\n};\n\n// class TestNavigation extends React.Component {\nfunction TestNavigation(props) {\n    return (\n        <nav id=\"navigation\" className=\"testNav\">\n            <h2 className=\"qti-visually-hidden\">Navigation</h2>\n            <NavigationButton dir=\"next\" move={props.moveForward}></NavigationButton>\n            <NavigationButton dir=\"prev\" move={props.moveBack}></NavigationButton>\n            <OverviewButton isFinalItem={props.activeSectionId === 'assessmentSection-3' && props.activeItemId === 'item-5'}></OverviewButton>\n            <ol className=\"testNav-sections\">\n                {Object.entries(props.sectionsMap).map(([sectionId, sectionData]) =>\n                    <NavSection\n                        key={sectionId}\n                        sectionId={sectionId}\n                        sectionData={sectionData}\n                        bookmarks={props.bookmarks}\n                        activeSectionId={props.activeSectionId}\n                        activeItemId={props.activeItemId}\n                        // funcs\n                        showItem={props.showItem}>\n                    </NavSection>\n                )}\n            </ol>\n        </nav>\n    );\n}\n\nTestNavigation.propTypes = propTypes;\nTestNavigation.defaultProps = defaultProps;\n\nexport default TestNavigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { set } from 'object-path-immutable';\n\nimport ThemeContext from '../../ThemeContext';\nimport JumpMenu from './Header/JumpMenu';\nimport Header from './Header/Header';\nimport Item from './Item/Item';\nimport TestNavigation from './Navigation/TestNavigation';\n\nimport '../../css/themes/light.scss';\nimport '../../css/themes/dark.scss';\n\nconst propTypes = {\n    data: PropTypes.object.isRequired,\n    toggleTheme: PropTypes.func\n};\n\nclass TestRunner extends React.Component {\n\n    constructor(props) {\n        console.log(props);\n        super(props);\n        this.moveForward = this.moveForward.bind(this);\n        this.moveBack = this.moveBack.bind(this);\n        this.showItem = this.showItem.bind(this);\n        this.bookmarkItem = this.bookmarkItem.bind(this);\n        this.setResponse = this.setResponse.bind(this);\n\n        this.state = {\n            sectionsMap: props.data.testMap.parts[\"testPart-1\"].sections,\n            activeSectionId: props.data.testContext.sectionId,\n            activeItemId: props.data.testContext.itemIdentifier,\n            itemAnimation: '',\n            bookmarks: {},\n            responses: {}\n        };\n    }\n\n    componentDidMount() {\n        // start by marking current item as viewed\n        this.markItemViewed({\n            sectionId: this.state.activeSectionId,\n            itemId: this.state.activeItemId\n        });\n    }\n\n    /**\n     * Toggles the bookmark status for a specific item in the test runner\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    bookmarkItem({ sectionId, itemId }) {\n        const key = `${sectionId}_${itemId}`;\n        this.setState((state) => ({\n            bookmarks: Object.assign(state.bookmarks, {\n                [key]: !state.bookmarks[key]\n            })\n        }));\n    }\n\n    /**\n     * Sets the response variable for a specific item in the test runner\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @param {String} letter\n     * @affects {TestRunner.state}\n     */\n    setResponse({ sectionId, itemId, letter }) {\n        const key = `${sectionId}_${itemId}`;\n        this.setState((state) => ({\n            responses: Object.assign(state.responses, {\n                [key]: letter\n            })\n        }));\n        this.markItemAnswered({ sectionId, itemId });\n    }\n\n    /**\n     * Shows a specific item in the test runner\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    showItem({ sectionId, itemId }) {\n        console.log('Go to', sectionId, 'from', this.state.activeSectionId, 'and', itemId, 'from', this.state.activeItemId);\n\n        // which way to animate?\n        if (sectionId < this.state.activeSectionId) {\n            this.setState({ itemAnimation: 'translateRight' });\n        }\n        else if (sectionId > this.state.activeSectionId) {\n            this.setState({ itemAnimation: 'translateLeft' });\n        }\n        else if (itemId < this.state.activeItemId) {\n            this.setState({ itemAnimation: 'translateRight' });\n        }\n        else if (itemId > this.state.activeItemId) {\n            this.setState({ itemAnimation: 'translateLeft' });\n        }\n        else {\n            this.setState({ itemAnimation: '' });\n        }\n\n        this.setState(() => ({\n            activeSectionId: sectionId,\n            activeItemId: itemId\n            // sectionsMap: set(state.sectionsMap, [sectionId, 'items', itemId, 'viewed'], true)\n        }));\n        this.markItemViewed({ sectionId, itemId });\n    }\n\n    /**\n     * Marks a specific item as viewed\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    markItemViewed({ sectionId, itemId }) {\n        this.setState((state) => ({\n            sectionsMap: set(state.sectionsMap, [sectionId, 'items', itemId, 'viewed'], true)\n        }));\n    }\n\n    /**\n     * Marks a specific item as answered\n     * @param {String} sectionId\n     * @param {String} itemId\n     * @affects {TestRunner.state}\n     */\n    markItemAnswered({ sectionId, itemId }) {\n        this.setState((state) => ({\n            sectionsMap: set(state.sectionsMap, [sectionId, 'items', itemId, 'answered'], true)\n        }));\n    }\n\n    /**\n     * Gets the data pertaining to the active section\n     * @returns {Object} section data\n     */\n    getActiveSection() {\n        return this.state.sectionsMap[this.state.activeSectionId];\n    }\n\n    /**\n     * Gets the data pertaining to the active item\n     * @returns {Object} item data\n     */\n    getActiveItem() {\n        return this.getActiveSection().items[this.state.activeItemId];\n    }\n\n    /**\n     * Gets all the items in a given section\n     * @returns {Object} items as { id: {data} }\n     */\n    getItems(sectionId) {\n        return this.state.sectionsMap[sectionId].items;\n    }\n\n    /**\n     * Gets the identifier of the next section\n     * @returns {String}\n     */\n    getNextSectionId() {\n        const currentSectionPos = this.getActiveSection().position;\n        const nextSection = Object.entries(this.state.sectionsMap).filter(([k, v]) => k && v.position === currentSectionPos + 1)[0];\n        return nextSection ? nextSection[0] : null;\n    }\n\n    /**\n     * Gets the identifier of the previous section\n     * @returns {String}\n     */\n    getPreviousSectionId() {\n        const currentSectionPos = this.getActiveSection().position;\n        const prevSection = Object.entries(this.state.sectionsMap).filter(([k, v]) => k && v.position === currentSectionPos - 1)[0];\n        return prevSection ? prevSection[0] : null;\n    }\n\n    /**\n     * Gets the data pertaining to the previous section\n     * @returns {Object}\n     */\n    getPreviousSection() {\n        const id = this.getPreviousSectionId();\n        return id ? this.state.sectionsMap[id] : null;\n    }\n\n    /**\n     * Moves forward to the next item or section\n     */\n    moveForward() {\n        const currentPos = this.getActiveItem().positionInSection;\n        const currentSection = this.getActiveSection();\n        const maxPos = Object.keys(currentSection.items).length - 1;\n        if (currentPos < maxPos) {\n            this.moveTo(this.state.activeSectionId, currentPos + 1);\n        }\n        else {\n            const nextSectionId = this.getNextSectionId();\n            if (!nextSectionId) return;\n            this.moveTo(nextSectionId, 0); // ok\n        }\n    }\n\n    /**\n     * Moves back to the previous item or section\n     */\n    moveBack() {\n        const currentPos = this.getActiveItem().positionInSection;\n        const minPos = 0;\n        if (currentPos > minPos) {\n            this.moveTo(this.state.activeSectionId, currentPos - 1);\n        }\n        else {\n            const previousSectionId = this.getPreviousSectionId();\n            const previousSection = this.getPreviousSection();\n            if (!previousSection) return;\n            const previousSectionEnd = Object.keys(previousSection.items).length - 1;\n            this.moveTo(previousSectionId, previousSectionEnd);\n        }\n    }\n\n    /**\n     * Move anywhere within the test part\n     * @param {String} sectionId\n     * @param {Integer} pos\n     * @affects {TestRunner.state}\n     */\n    moveTo(sectionId, pos) {\n        if (typeof sectionId === 'undefined' || typeof pos === 'undefined') return;\n\n        const itemId = Object.entries(this.getItems(sectionId)).filter(([k,v]) => k && v.position === pos )[0][0];\n        this.showItem({ sectionId, itemId });\n    }\n\n    render() {\n        return (\n            <div className={`test-runner theme-${this.context}`}>\n                <JumpMenu></JumpMenu>\n                <Header\n                    testTitle={this.props.data.testData.title}\n                    sectionData={this.state.sectionsMap[this.state.activeSectionId]}\n                    // funcs\n                    toggleTheme={this.props.toggleTheme}>\n                </Header>\n                <main id=\"main\">\n                    <Item\n                        itemData={this.state.sectionsMap[this.state.activeSectionId].items[this.state.activeItemId]}\n                        sectionId={this.state.activeSectionId}\n                        itemId={this.state.activeItemId}\n                        itemAnimation={this.state.itemAnimation}\n                        isBookmarked={this.state.bookmarks[`${this.state.activeSectionId}_${this.state.activeItemId}`]}\n                        response={this.state.responses[`${this.state.activeSectionId}_${this.state.activeItemId}`]}\n                        // funcs\n                        bookmarkItem={this.bookmarkItem}\n                        setResponse={this.setResponse}>\n                    </Item>\n                </main>\n                <TestNavigation\n                    sectionsMap={this.state.sectionsMap}\n                    bookmarks={this.state.bookmarks}\n                    activeSectionId={this.state.activeSectionId}\n                    activeItemId={this.state.activeItemId}\n                    // funcs\n                    showItem={this.showItem}\n                    moveForward={this.moveForward}\n                    moveBack={this.moveBack}>\n                </TestNavigation>\n            </div>\n        );\n    }\n}\nTestRunner.contextType = ThemeContext;\n\nTestRunner.propTypes = propTypes;\n\nexport default TestRunner;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from './ThemeContext';\nimport TestRunner from './components/TestRunner/TestRunner';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'normalize.css';\nimport './css/App.scss';\nimport './css/tao-a11y-styles.css';\n\nconst baseUrl = '/data';\nconst testDataFile = 'testData.json';\n\nfunction App() {\n    const [theme, setTheme] = useState('light');\n    const [testData, setTestData] = useState(null); // to block initial render\n\n    function toggleTheme() {\n        setTheme(theme => (theme === 'light' ? 'dark' : 'light'));\n    }\n\n    // Hook to fetch data\n    useEffect(() => {\n        console.log('fetching testData...');\n        fetch(`${baseUrl}/${testDataFile}`)\n            .then(res => res.json())\n            .then((data) => {\n                console.log(data);\n                setTestData(data); // to force initial render\n            });\n    }, []); // no args => will run once only\n\n    return testData && (\n        <ThemeProvider value={theme} key={Object.keys(testData)[0]}>\n            <TestRunner data={testData} toggleTheme={toggleTheme} />\n        </ThemeProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}